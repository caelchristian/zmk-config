/*
 * Copyright (c) 3520 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&mt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
    hold-while-undecided;
    hold-trigger-on-release;
};

&lt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
    hold-while-undecided;
    hold-trigger-on-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 2>;
            timeout-ms = <35>;
        };

        left_square_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            timeout-ms = <35>;
        };

        left_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <3 4>;
            timeout-ms = <35>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <9 10>;
            timeout-ms = <35>;
        };

        right_square_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
            timeout-ms = <35>;
        };

        right_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            timeout-ms = <35>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <28 27>;
            timeout-ms = <30>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <31 32>;
            timeout-ms = <30>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <19 18>;
            timeout-ms = <30>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <29 28>;
            timeout-ms = <30>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <30 31>;
            timeout-ms = <30>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <27 15>;
            timeout-ms = <30>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <29 17>;
            timeout-ms = <30>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <32 33>;
            timeout-ms = <30>;
        };

        greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <33 34>;
            timeout-ms = <30>;
        };

        exclaimation {
            bindings = <&kp EXCL>;
            key-positions = <1 13>;
            timeout-ms = <30>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <14 2>;
            timeout-ms = <30>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <15 3>;
            timeout-ms = <30>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <16 4>;
            timeout-ms = <30>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
            timeout-ms = <30>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
            timeout-ms = <30>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
            timeout-ms = <30>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
            timeout-ms = <30>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <9 21>;
            timeout-ms = <30>;
        };

        semi-colon {
            bindings = <&kp SEMICOLON>;
            key-positions = <10 22>;
            timeout-ms = <30>;
        };
    };

    behaviors {
        to_reset: to_reset {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_RESET";
            #binding-cells = <0>;
            bindings = <&none>, <&to_reset>;
        };

        to_boot: to_bootloader {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_BOOT";
            #binding-cells = <0>;
            bindings = <&none>, <&to_boot>;
        };

        autoshft: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
        };

        hrm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
        };

        hrm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
        };

        capsword_caps: capsword_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPSWORD_CAPSLOCK";
            bindings = <&caps_word>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shifted_comma: mod-morph_comma {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shifted_period: mod-morph_period {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        //        out_tog_usb: output_toggle {
        //          compatible = "zmk,behavior-mod-morph";
        //          label = "OUTPUT-TOGGLE_OUTPUT-USB";
        //          bindings = <&out OUT_TOG>, <&out OUT_USB>;
        //          #binding-cells = <0>;
        //          mods = <(MOD_LSFT|MOD_RSFT)>;
        //      };
        //      btn: button_layer {
        //          compatible = "zmk,behavior-hold-tap";
        //          label = "BUTTON_LAYER";
        //          bindings = <&mo>, <&kp>;
        //          #binding-cells = <2>;
        //          tapping-term-ms = <200>;
        //          flavor = "tap-preferred";
        //      };
        //      to_base: tto_base {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TAPDANCE_TO_BASE";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 0>;
        //      };
        //      to_extra: to_extra {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TAPDANCE_TO_EXTRA";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 0>;
        //      };
        //      to_tap: to_tap {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TAPDANCE_TO_TAP_LAYER";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 0>;
        //      };
        //      to_button: to_button {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TAPDANCE_TO_BUTTON";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 0>;
        //      };
        //      to_nav: to_nav {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TAPDANCE_TO_NAV";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 0>;
        //      };
        //      to_sym2: to_sym2 {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TO_SYM2";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 1>;
        //      };
        //      to_media: to_media {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TO_MEDIA";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 0>;
        //      };
        //      to_num: to_num {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TO_NUM";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 5>;
        //      };
        //      to_sym: to_sym {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TO_SYM";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 5>;
        //      };
        //      to_func: to_func {
        //          compatible = "zmk,behavior-tap-dance";
        //          label = "TO_FUNC";
        //          #binding-cells = <0>;
        //          bindings = <&none>, <&to 5>;
        //      };

        shift_hyper: shift_hyper {
            compatible = "zmk,behavior-mod-morph";
            label = "STICKYSHIFT_STICKYHYPER";
            bindings = <&sk LEFT_SHIFT>, <&sk LA(LS(LG(LCTRL)))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_equal: plus_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_EQUAL";
            bindings = <&kp PLUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
    };

    macros {
        shift: with_lshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTKEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |   `   |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  |  -   |
            // |cw_caps|  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
            // | skSHFT|  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  |  \   |
            //                    | ESC | SPC | TAB |   | ENT | BKSP | DEL |

            bindings = <
&kp GRAVE             &kp Q             &kp W               &kp F           &kp P               &kp B        &kp J            &kp L                &kp U            &kp Y                &kp SQT            &kp EQUAL
&lt 2 ESCAPE          &mt LEFT_SHIFT A  &mt LEFT_CONTROL R  &mt LEFT_ALT S  &mt LEFT_COMMAND T  &kp G        &kp M            &mt RIGHT_COMMAND N  &mt RIGHT_ALT E  &mt RIGHT_CONTROL I  &mt RIGHT_SHIFT O  &kp ENTER
&kp NON_US_BACKSLASH  &kp Z             &kp X               &kp C           &kp D               &kp V        &kp K            &kp H                &shifted_comma   &shifted_period      &kp SLASH          &kp SEMICOLON
                                                            &kp ESCAPE      &kp SPACE           &lt 1 TAB    &lt 2 BACKSPACE  &sk LEFT_SHIFT       &lt 2 DELETE
            >;
        };

        sym {
            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN        &kp HASH               &kp DOLLAR      &kp PERCENT      &kp LCTRL     &kp N7        &kp N8        &kp N9        &kp AMPERSAND  &kp DEL
&trans     &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &kp EQUAL       &kp MINUS        &kp PLUS      &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS      &trans
&trans     &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &kp AMPERSAND    &kp ASTERISK  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none          &trans
                                               &trans                 &trans          &trans           &trans        &kp N0        &kp PERIOD
            >;
        };

        func+arrows {
            bindings = <
&bt BT_PRV    &kp F12  &kp F7  &kp F8  &kp F9  &kp PSCRN          &none   &kp PAGE_DOWN   &kp UP_ARROW    &kp PAGE_UP  &trans  &bt BT_CLR_ALL
&bt BT_NXT    &kp F11  &kp F4  &kp F5  &kp F6  &kp SLCK           &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT    &none   &none
&bt BT_SEL 0  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &none   &none           &none           &none        &none   &none
                               &trans  &trans  &trans             &trans  &trans          &trans
            >;
        };

        sym_hr {
            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN     &kp HASH          &kp DOLLAR            &none     &none   &kp PERCENT            &kp CARET          &kp AMPERSAND    &kp ASTERISK  &kp DEL
&trans     &kp MINUS        &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &none     &none   &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp PLUS      &trans
&trans     &none            &none           &none             &kp MINUS             &none     &none   &kp EQUAL              &none              &none            &none         &trans
                                            &trans            &trans                &trans    &trans  &kp N0                 &kp PERIOD
            >;
        };

        hyper {
            bindings = <
&kp TAB  &kp LS(LA(LC(LG(Q))))  &kp LS(LA(LG(LC(W))))  &kp LS(LA(LG(LC(F))))  &kp LS(LA(LC(LG(P))))  &kp LS(LG(LA(LC(B))))    &kp LS(LA(LC(LG(J))))  &kp LS(LG(LC(LA(L))))  &kp LS(LA(LC(LG(U))))      &kp LS(LA(LC(LG(Y))))    &kp LA(LC(LG(LS(SEMI))))  &trans
&trans   &kp LS(LC(LA(LG(A))))  &kp LA(LG(LC(LS(R))))  &kp LS(LA(LC(LG(S))))  &kp LS(LA(LC(LG(T))))  &kp LS(LC(LG(LA(G))))    &kp LS(LC(LG(LA(M))))  &kp LS(LA(LC(LG(N))))  &kp LS(LA(LC(LG(E))))      &kp LS(LG(LC(LA(I))))    &kp LS(LG(LA(LC(O))))     &kp APOS
&trans   &kp LS(LA(LC(LG(Z))))  &kp LG(LC(LA(LS(X))))  &kp LG(LC(LS(LA(C))))  &kp LG(LC(LS(LA(D))))  &kp LG(LS(LC(LA(V))))    &kp LG(LC(LA(LS(K))))  &kp LG(LC(LA(LS(H))))  &kp LC(LS(LA(LG(COMMA))))  &kp LG(LC(LA(LS(DOT))))  &kp LG(LC(LS(LA(FSLH))))  &trans
                                                       &trans                 &trans                 &trans                   &trans                 &trans                 &trans
            >;
        };

        qwerty {
            bindings = <
&trans  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P     &to 0
&trans  &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
&none  &none         &none         &none         &none         &none        &none         &none      &none   &none   &none   &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5       &kp NUMBER_6  &kp N7     &kp N8  &kp N9  &kp N0  &none
&none  &none         &none         &none         &none         &none        &none         &kp MINUS  &none   &none   &none   &none
                                   &kp PERIOD    &kp N0        &kp MINUS    &trans        &none      &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        hyper {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
